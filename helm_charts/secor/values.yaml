cloud_storage_bucket: "${cloud_storage_bucket}"
namespace: "secor-${deployment_stage}"
storageClass: "gp2"
secor_env: "${deployment_stage}"
image_repository: "${image_repository}"
region: "${region}"
pullPolicy: "Always"
jvm_memory: 1024m
image_tag: "${secor_image_tag}"

# Secor backups at various levels
secor_jobs:
  ingest-backup:
    replicas: 1
    consumer_group: "${deployment_stage}_ingest"
    service_name: "ingest"
    base_path: "${base_path}"
    timestamp_key: "${timestamp_key}"
    fallback_timestamp_key: "${fallback_timestamp_key}"
    topic: "${deployment_stage}.ingest"
    kafka_broker_host: "${kafka_broker_host}"
    zookeeper_quorum: "${zookeeper_quorum}"
    max_file_size: "${file_size}"
    max_file_age: "${file_age}"
    partition_prefix_enabled: "false"
    partition_prefix_key: ""
    partition_prefix_mapping: "{}"
    message_channel_prefix_enabled: "false"
    message_channel_identifier: "dataset"
    output_file_pattern: "{partition}-{currentTimestamp}.json"
    message_parser: "com.pinterest.secor.parser.PatternDateMessageParser"
    storage:
      size: "${backup_pv_size}"
    requests:
      cpu: "${request_cpu}"
      memory: "${request_memory}"
    limits:
      cpu: "${secor_cpu_limit}"
      memory: "${secor_memory_limit}"
    lag_threshold_warning: 100000
    threads: "${threads}"
    lag_threshold_critical: 200000
  
  extractor-duplicate:
    replicas: 1
    consumer_group: "${deployment_stage}_extractor_duplicate"
    service_name: "extractor_duplicate"
    base_path: "${base_path}"
    timestamp_key: "${timestamp_key}"
    fallback_timestamp_key: "${fallback_timestamp_key}"
    topic: "${deployment_stage}.extractor.duplicate"
    kafka_broker_host: "${kafka_broker_host}"
    zookeeper_quorum: "${zookeeper_quorum}"
    max_file_size: "${file_size}"
    max_file_age: "${file_age}"
    partition_prefix_enabled: "false"
    partition_prefix_key: ""
    partition_prefix_mapping: "{}"
    message_channel_prefix_enabled: "false"
    message_channel_identifier: "dataset"
    output_file_pattern: "{partition}-{currentTimestamp}.json"
    message_parser: "com.pinterest.secor.parser.PatternDateMessageParser"
    storage:
      size: "${backup_pv_size}"
    requests:
      cpu: "${request_cpu}"
      memory: "${request_memory}"
    limits:
      cpu: "${secor_cpu_limit}"
      memory: "${secor_memory_limit}"
    lag_threshold_warning: 100000
    threads: "${threads}"
    lag_threshold_critical: 200000
    

  extractor-failed:
    replicas: 1
    consumer_group: "${deployment_stage}_extractor_failed"
    service_name: "extractor_failed"
    base_path: "${base_path}"
    timestamp_key: "${timestamp_key}"
    fallback_timestamp_key: "${fallback_timestamp_key}"
    topic: "${deployment_stage}.extractor.failed"
    kafka_broker_host: "${kafka_broker_host}"
    zookeeper_quorum: "${zookeeper_quorum}"
    max_file_size: "${file_size}"
    max_file_age: "${file_age}"
    partition_prefix_enabled: "false"
    partition_prefix_key: ""
    partition_prefix_mapping: "{}"
    message_channel_prefix_enabled: "false"
    message_channel_identifier: "dataset"
    output_file_pattern: "{partition}-{currentTimestamp}.json"
    message_parser: "com.pinterest.secor.parser.PatternDateMessageParser"
    storage:
      size: "${backup_pv_size}"
    requests:
      cpu: "${request_cpu}"
      memory: "${request_memory}"
    limits:
      cpu: "${secor_cpu_limit}"
      memory: "${secor_memory_limit}"
    lag_threshold_warning: 100000
    threads: "${threads}"
    lag_threshold_critical: 200000

  raw:
    replicas: 1
    consumer_group: "${deployment_stage}_raw"
    service_name: "raw"
    base_path: "${base_path}"
    timestamp_key: "${timestamp_key}"
    fallback_timestamp_key: "${fallback_timestamp_key}"
    topic: "${deployment_stage}.raw"
    kafka_broker_host: "${kafka_broker_host}"
    zookeeper_quorum: "${zookeeper_quorum}"
    max_file_size: "${file_size}"
    max_file_age: "${file_age}"
    partition_prefix_enabled: "false"
    partition_prefix_key: ""
    partition_prefix_mapping: "{}"
    message_channel_prefix_enabled: "false"
    message_channel_identifier: "dataset"
    output_file_pattern: "{partition}-{currentTimestamp}.json"
    message_parser: "com.pinterest.secor.parser.PatternDateMessageParser"
    storage:
      size: "${backup_pv_size}"
    requests:
      cpu: "${request_cpu}"
      memory: "${request_memory}"
    limits:
      cpu: "${secor_cpu_limit}"
      memory: "${secor_memory_limit}"
    lag_threshold_warning: 100000
    threads: "${threads}"
    lag_threshold_critical: 200000

  failed:
    replicas: 1
    consumer_group: "${deployment_stage}_failed"
    service_name: "failed"
    base_path: "${base_path}"
    timestamp_key: "${timestamp_key}"
    fallback_timestamp_key: "${fallback_timestamp_key}"
    topic: "${deployment_stage}.failed"
    kafka_broker_host: "${kafka_broker_host}"
    zookeeper_quorum: "${zookeeper_quorum}"
    max_file_size: "${file_size}"
    max_file_age: "${file_age}"
    partition_prefix_enabled: "false"
    partition_prefix_key: ""
    partition_prefix_mapping: "{}"
    message_channel_prefix_enabled: "false"
    message_channel_identifier: "dataset"
    output_file_pattern: "{partition}-{currentTimestamp}.json"
    message_parser: "com.pinterest.secor.parser.PatternDateMessageParser"
    storage:
      size: "${backup_pv_size}"
    requests:
      cpu: "${request_cpu}"
      memory: "${request_memory}"
    limits:
      cpu: "${secor_cpu_limit}"
      memory: "${secor_memory_limit}"
    lag_threshold_warning: 100000
    threads: "${threads}"
    lag_threshold_critical: 200000

invalid:
    replicas: 1
    consumer_group: "${deployment_stage}_invalid"
    service_name: "invalid"
    base_path: "${base_path}"
    timestamp_key: "${timestamp_key}"
    fallback_timestamp_key: "${fallback_timestamp_key}"
    topic: "${deployment_stage}.invalid"
    kafka_broker_host: "${kafka_broker_host}"
    zookeeper_quorum: "${zookeeper_quorum}"
    max_file_size: "${file_size}"
    max_file_age: "${file_age}"
    partition_prefix_enabled: "false"
    partition_prefix_key: ""
    partition_prefix_mapping: "{}"
    message_channel_prefix_enabled: "false"
    message_channel_identifier: "dataset"
    output_file_pattern: "{partition}-{currentTimestamp}.json"
    message_parser: "com.pinterest.secor.parser.PatternDateMessageParser"
    storage:
      size: "${backup_pv_size}"
    requests:
      cpu: "${request_cpu}"
      memory: "${request_memory}"
    limits:
      cpu: "${secor_cpu_limit}"
      memory: "${secor_memory_limit}"
    lag_threshold_warning: 100000
    threads: "${threads}"
    lag_threshold_critical: 200000

unique:
    replicas: 1
    consumer_group: "${deployment_stage}_unique"
    service_name: "unique"
    base_path: "${base_path}"
    timestamp_key: "${timestamp_key}"
    fallback_timestamp_key: "${fallback_timestamp_key}"
    topic: "${deployment_stage}.unique"
    kafka_broker_host: "${kafka_broker_host}"
    zookeeper_quorum: "${zookeeper_quorum}"
    max_file_size: "${file_size}"
    max_file_age: "${file_age}"
    partition_prefix_enabled: "false"
    partition_prefix_key: ""
    partition_prefix_mapping: "{}"
    message_channel_prefix_enabled: "false"
    message_channel_identifier: "dataset"
    output_file_pattern: "{partition}-{currentTimestamp}.json"
    message_parser: "com.pinterest.secor.parser.PatternDateMessageParser"
    storage:
      size: "${backup_pv_size}"
    requests:
      cpu: "${request_cpu}"
      memory: "${request_memory}"
    limits:
      cpu: "${secor_cpu_limit}"
      memory: "${secor_memory_limit}"
    lag_threshold_warning: 100000
    threads: "${threads}"
    lag_threshold_critical: 200000

duplicate:
    replicas: 1
    consumer_group: "${deployment_stage}_duplicate"
    service_name: "duplicate"
    base_path: "${base_path}"
    timestamp_key: "${timestamp_key}"
    fallback_timestamp_key: "${fallback_timestamp_key}"
    topic: "${deployment_stage}.duplicate"
    kafka_broker_host: "${kafka_broker_host}"
    zookeeper_quorum: "${zookeeper_quorum}"
    max_file_size: "${file_size}"
    max_file_age: "${file_age}"
    partition_prefix_enabled: "false"
    partition_prefix_key: ""
    partition_prefix_mapping: "{}"
    message_channel_prefix_enabled: "false"
    message_channel_identifier: "dataset"
    output_file_pattern: "{partition}-{currentTimestamp}.json"
    message_parser: "com.pinterest.secor.parser.PatternDateMessageParser"
    storage:
      size: "${backup_pv_size}"
    requests:
      cpu: "${request_cpu}"
      memory: "${request_memory}"
    limits:
      cpu: "${secor_cpu_limit}"
      memory: "${secor_memory_limit}"
    lag_threshold_warning: 100000
    threads: "${threads}"
    lag_threshold_critical: 200000

denorm:
    replicas: 1
    consumer_group: "${deployment_stage}_denorm"
    service_name: "denorm"
    base_path: "${base_path}"
    timestamp_key: "${timestamp_key}"
    fallback_timestamp_key: "${fallback_timestamp_key}"
    topic: "${deployment_stage}.denorm"
    kafka_broker_host: "${kafka_broker_host}"
    zookeeper_quorum: "${zookeeper_quorum}"
    max_file_size: "${file_size}"
    max_file_age: "${file_age}"
    partition_prefix_enabled: "false"
    partition_prefix_key: ""
    partition_prefix_mapping: "{}"
    message_channel_prefix_enabled: "false"
    message_channel_identifier: "dataset"
    output_file_pattern: "{partition}-{currentTimestamp}.json"
    message_parser: "com.pinterest.secor.parser.PatternDateMessageParser"
    storage:
      size: "${backup_pv_size}"
    requests:
      cpu: "${request_cpu}"
      memory: "${request_memory}"
    limits:
      cpu: "${secor_cpu_limit}"
      memory: "${secor_memory_limit}"
    lag_threshold_warning: 100000
    threads: "${threads}"
    lag_threshold_critical: 200000

denorm_failed:
    replicas: 1
    consumer_group: "${deployment_stage}_denorm_failed"
    service_name: "denorm_failed"
    base_path: "${base_path}"
    timestamp_key: "${timestamp_key}"
    fallback_timestamp_key: "${fallback_timestamp_key}"
    topic: "${deployment_stage}.denorm.failed"
    kafka_broker_host: "${kafka_broker_host}"
    zookeeper_quorum: "${zookeeper_quorum}"
    max_file_size: "${file_size}"
    max_file_age: "${file_age}"
    partition_prefix_enabled: "false"
    partition_prefix_key: ""
    partition_prefix_mapping: "{}"
    message_channel_prefix_enabled: "false"
    message_channel_identifier: "dataset"
    output_file_pattern: "{partition}-{currentTimestamp}.json"
    message_parser: "com.pinterest.secor.parser.PatternDateMessageParser"
    storage:
      size: "${backup_pv_size}"
    requests:
      cpu: "${request_cpu}"
      memory: "${request_memory}"
    limits:
      cpu: "${secor_cpu_limit}"
      memory: "${secor_memory_limit}"
    lag_threshold_warning: 100000
    threads: "${threads}"
    lag_threshold_critical: 200000

transform:
    replicas: 1
    consumer_group: "${deployment_stage}_transform"
    service_name: "transform"
    base_path: "${base_path}"
    timestamp_key: "${timestamp_key}"
    fallback_timestamp_key: "${fallback_timestamp_key}"
    topic: "${deployment_stage}.transform"
    kafka_broker_host: "${kafka_broker_host}"
    zookeeper_quorum: "${zookeeper_quorum}"
    max_file_size: "${file_size}"
    max_file_age: "${file_age}"
    partition_prefix_enabled: "false"
    partition_prefix_key: ""
    partition_prefix_mapping: "{}"
    message_channel_prefix_enabled: "false"
    message_channel_identifier: "dataset"
    output_file_pattern: "{partition}-{currentTimestamp}.json"
    message_parser: "com.pinterest.secor.parser.PatternDateMessageParser"
    storage:
      size: "${backup_pv_size}"
    requests:
      cpu: "${request_cpu}"
      memory: "${request_memory}"
    limits:
      cpu: "${secor_cpu_limit}"
      memory: "${secor_memory_limit}"
    lag_threshold_warning: 100000
    threads: "${threads}"
    lag_threshold_critical: 200000

# exporter:
#   image:
#     repository: prom/statsd-exporter
#     tag: latest
#     pullPolicy: IfNotPresent

# prometheus_rule_selector_app: prometheus-operator
# prometheus_rule_selector_release: prometheus-operator

# If you enable this, secor lag alert rules will be created in the flink cluster.
# In our case the consumer group lag metrics available in core prometheus.
# So we need to create the secor lag alert rule in core prometheus.
# By adding this condition we are avoiding creating the secor lag alert rule in flink cluster.
alertrules:
  enabled: false

describedobject:
  name: "data-path"